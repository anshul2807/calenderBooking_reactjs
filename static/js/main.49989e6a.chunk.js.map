{"version":3,"sources":["Component/Booking.js","App.js","reportWebVitals.js","index.js"],"names":["Booking","gapi","window","DISCOVERY_DOCS","useState","date","SetDate","name","SetName","email","SetEmail","className","for","value","onChange","e","target","type","onClick","preventDefault","load","console","log","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","signIn","then","event","Date","toISOString","calendar","events","insert","execute","open","htmlLink","list","response","result","items","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAmIeA,EA/HE,WAEb,IAAIC,EAAOC,OAAOD,KAGdE,EAAiB,CAAC,iEALJ,EASKC,mBAAS,IATd,mBASXC,EATW,KASNC,EATM,OAUKF,mBAAS,IAVd,mBAUXG,EAVW,KAUNC,EAVM,OAWOJ,mBAAS,IAXhB,mBAWXK,EAXW,KAWLC,EAXK,KAoGlB,OACI,sBAAKC,UAAU,UAAf,UACI,qDACA,uBAAMA,UAAU,gBAAhB,UACI,uBAAOC,IAAI,WAAX,mBACA,uBACAC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAET,EAAQS,EAAEC,OAAOH,QAC7BI,KAAK,OAAOV,KAAK,SAClB,uBAAOK,IAAI,WAAX,oBACA,uBACAC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAEL,EAASK,EAAEC,OAAOH,QAC/BI,KAAK,UACL,uBAAOL,IAAI,WAAX,mBACA,uBACAC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAEP,EAAQO,EAAEC,OAAOH,QAC9BI,KAAK,SAEL,wBAAQA,KAAK,SAASC,QA3Gd,SAACH,GACjBA,EAAEI,iBACFlB,EAAKmB,KAAK,gBAAgB,WACxBC,QAAQC,IAAI,iBAEZrB,EAAKsB,OAAOC,KAAK,CACfC,OAfM,0CAgBNC,SAjBQ,2EAkBRC,cAAexB,EACfyB,MAhBK,oDAmBP3B,EAAKsB,OAAOH,KAAK,WAAY,MAAM,kBAAMC,QAAQC,IAAI,WAErDrB,EAAK4B,MAAMC,kBAAkBC,SAC5BC,MAAK,WAEJ,IAAIC,EAAQ,CACV,QAAW1B,EACX,SAAY,0CACZ,YAAe,4BACf,MAAS,CACP,SAAa,IAAI2B,KAAK7B,GAAO8B,cAC7B,SAAY,uBAEd,IAAO,CACL,SAAa,IAAID,KAAK7B,GAAO8B,cAC7B,SAAY,uBAEd,WAAc,CACZ,4BAEF,UAAa,CACX,CAAC,MAAS1B,GACV,CAAC,MAASA,IAEZ,UAAa,CACX,YAAc,EACd,UAAa,CACX,CAAC,OAAU,QAAS,QAAW,MAC/B,CAAC,OAAU,QAAS,QAAW,OAKvBR,EAAKsB,OAAOa,SAASC,OAAOC,OAAO,CAC/C,WAAc,UACd,SAAYL,IAGNM,SAAQ,SAAAN,GACdZ,QAAQC,IAAIW,GACZ/B,OAAOsC,KAAKP,EAAMQ,aASpBxC,EAAKsB,OAAOa,SAASC,OAAOK,KAAK,CAC/B,WAAc,UACd,SAAY,IAAIR,MAAQC,cACxB,aAAe,EACf,cAAgB,EAChB,WAAc,GACd,QAAW,cACVH,MAAK,SAAAW,GACN,IAAMN,EAASM,EAASC,OAAOC,MAC/BxB,QAAQC,IAAI,WAAYe,YAO9B/B,EAAQ,IACRE,EAAQ,IACRE,EAAS,KA4BD,gCCjHDoC,MATf,WACE,OACE,qBAAKnC,UAAU,MAAf,SAEE,cAAC,EAAD,OCMSoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49989e6a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './Booking.css'\r\n\r\n\r\nconst  Booking = ()=> {\r\n    // API stuffs start\r\n    var gapi = window.gapi;\r\n    var CLIENT_ID = \"251018004396-r2rb0efh4bvr7bmbqbb2geppm75eha3c.apps.googleusercontent.com\";\r\n    var API_KEY = \"AIzaSyDhGUNjwsEKFz_bCAhP_l_hy2W7o9ELTlY\";\r\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\r\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\r\n\r\n    \r\n    const [date,SetDate] = useState('');\r\n    const [name,SetName] = useState('');\r\n    const [email,SetEmail] = useState('');\r\n    \r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        gapi.load('client:auth2', () => {\r\n          console.log('loaded client')\r\n    \r\n          gapi.client.init({\r\n            apiKey: API_KEY,\r\n            clientId: CLIENT_ID,\r\n            discoveryDocs: DISCOVERY_DOCS,\r\n            scope: SCOPES,\r\n          })\r\n    \r\n          gapi.client.load('calendar', 'v3', () => console.log('bam!'))\r\n    \r\n          gapi.auth2.getAuthInstance().signIn()\r\n          .then(() => {\r\n            \r\n            var event = {\r\n              'summary': name,\r\n              'location': '800 Howard St., San Francisco, CA 94103',\r\n              'description': 'Really great refreshments',\r\n              'start': {\r\n                'dateTime': (new Date(date)).toISOString(),\r\n                'timeZone': 'America/Los_Angeles'\r\n              },\r\n              'end': {\r\n                'dateTime': (new Date(date)).toISOString(),\r\n                'timeZone': 'America/Los_Angeles'\r\n              },\r\n              'recurrence': [\r\n                'RRULE:FREQ=DAILY;COUNT=2'\r\n              ],\r\n              'attendees': [\r\n                {'email': email},\r\n                {'email': email}\r\n              ],\r\n              'reminders': {\r\n                'useDefault': false,\r\n                'overrides': [\r\n                  {'method': 'email', 'minutes': 24 * 60},\r\n                  {'method': 'popup', 'minutes': 10}\r\n                ]\r\n              }\r\n            }\r\n    \r\n            var request = gapi.client.calendar.events.insert({\r\n              'calendarId': 'primary',\r\n              'resource': event,\r\n            })\r\n    \r\n            request.execute(event => {\r\n              console.log(event)\r\n              window.open(event.htmlLink)\r\n            })\r\n            \r\n    \r\n            /*\r\n                Uncomment the following block to get events\r\n            */\r\n            \r\n            // get events\r\n            gapi.client.calendar.events.list({\r\n              'calendarId': 'primary',\r\n              'timeMin': (new Date()).toISOString(),\r\n              'showDeleted': false,\r\n              'singleEvents': true,\r\n              'maxResults': 20,\r\n              'orderBy': 'startTime'\r\n            }).then(response => {\r\n              const events = response.result.items\r\n              console.log('EVENTS: ', events)\r\n            })\r\n            \r\n        \r\n    \r\n          })\r\n        })\r\n        SetDate('');\r\n        SetName('');\r\n        SetEmail('');\r\n      }\r\n    \r\n\r\n\r\n    // API stuffs ends\r\n  \r\n    \r\n    return (\r\n        <div className=\"booking\">\r\n            <h1>Appointents Booking</h1>\r\n            <form className=\"booking__form\">\r\n                <label for=\"birthday\">Date:</label>\r\n                <input\r\n                value={date}\r\n                onChange={e=>SetDate(e.target.value)}\r\n                 type=\"date\" name=\"Date\"/>\r\n                <label for=\"birthday\">Email:</label>\r\n                <input \r\n                value={email}\r\n                onChange={e=>SetEmail(e.target.value)}\r\n                type=\"email\" />\r\n                <label for=\"birthday\">Name:</label>\r\n                <input\r\n                value={name}\r\n                onChange={e=>SetName(e.target.value)}\r\n                type=\"text\" />\r\n                \r\n                <button type=\"submit\" onClick={handleClick}>Add Booking</button>\r\n                \r\n           </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Booking;\r\n","import './App.css';\nimport Booking from './Component/Booking'\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1>Welcome guys</h1> */}\n      <Booking />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}